#! /usr/bin/env nix-shell
#! nix-shell -i bash -p bash coreutils file gnugrep gnused gnutar gzip patchelf

# Build a tarball with Miking and the necessary dependencies.
# Usage:
#
#     $ /path/to/miking-pack
#
# To run this script, you need only Nix.  See README.md for more
# information.

set -e

export TMP_DIR="/tmp/miking-pack"

init_temp_dir() {
    echo "Making build directory at $TMP_DIR."
    rm -rvf $TMP_DIR
    mkdir -v $TMP_DIR
}

install_miking() {
    echo "Installing Miking and dependencies to $TMP_DIR."
    mi_path="$(nix-build "$(dirname "${BASH_SOURCE[0]}")" -A miking --no-out-link)"
    nix-store --query --requisites "$mi_path" | while read dep_path; do
        cp -drnv $dep_path/* $TMP_DIR
        # Files copied from the nix store are unwritable, so update the permissions.
        chmod +w -R $TMP_DIR
    done
    for dep in 'patchelf' 'gnugrep' 'file'; do
        cp -drv $(nix-build '<nixpkgs>' -A pkgsStatic.$dep --no-out-link)/* $TMP_DIR
        chmod +w -R $TMP_DIR
    done
}

patch_binaries() {
    echo "Patching dynamic library paths in binaries."
    find $TMP_DIR/bin $TMP_DIR/libexec $TMP_DIR/lib -type f \
         ! -name '*.a' ! -name '*.cma' ! -name '*.cmi' ! -name '*.cmti' ! -name '*.cmx' \
         ! -name '*.h' ! -name '*.la' ! -name '*.ml' ! -name '*.mli' ! -name '*.o' \
         -exec bash -c 'file {} | grep -e "ELF.*\(executable\|shared\).*dynamic"' \; \
         -exec bash -c 'patchelf --set-rpath "\$ORIGIN/$(realpath --relative-to="$(dirname {})" $TMP_DIR/lib)" {}' \;
    sed -i -e 's,/nix/store/[^/]*/lib/,,g' $TMP_DIR/lib/libc.so $TMP_DIR/lib/libm.so
}

prepare_scripts() {
    echo "Preparing setup and wrapper scripts."
    cat <<'EOS' > $TMP_DIR/mi-setup
#!/bin/sh
echo "Setting up bundled Miking for use."
export SOURCE="$(dirname "$(realpath "$0")")"
echo "Bundle directory:  $SOURCE"
export MAGIC="$SOURCE/share/misc/magic.mgc"
find $SOURCE/bin $SOURCE/libexec -type f \
     -exec /bin/sh -c '$SOURCE/bin/file {} | $SOURCE/bin/grep -qe "ELF.*executable.*dynamic"' \; \
     -exec $SOURCE/bin/patchelf \
     --set-interpreter $SOURCE/lib/ld-linux-x86-64.so.2 {} \;
echo "Finished setup."
EOS
    cat <<'EOS' > $TMP_DIR/mi
#!/bin/sh
SOURCE="$(dirname "$(realpath "$0")")"
export OCAMLPATH="$SOURCE/lib/ocaml:$SOURCE/lib/ocaml/5.0.0/site-lib"
export OCAMLLIB="$SOURCE/lib/ocaml"
export PATH="$SOURCE/bin"
export LIBRARY_PATH="$SOURCE/lib"
export MCORE_LIBS="stdlib=$SOURCE/lib/mcore/stdlib"
export OCAMLPARAM=":_:ccopt=-Wl,--dynamic-linker=$SOURCE/lib/ld-linux-x86-64.so.2,-rpath=$SOURCE/lib"
unset  OPAM_SWITCH_PREFIX
unset  LD_LIBRARY_PATH
exec -a "$0" "$SOURCE/bin/mi" "$@"
EOS
    chmod +x $TMP_DIR/mi $TMP_DIR/mi-setup
}

make_tarball() {
    init_temp_dir
    install_miking
    patch_binaries
    prepare_scripts
    tar -C /tmp -czvf miking-pack.tar.gz ./miking-pack
}

make_tarball
