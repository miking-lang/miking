#! /usr/bin/env nix-shell
#! nix-shell -i bash -p nix git --pure

# Build a tarball with Miking and the necessary dependencies.
# Usage:
#
#     $ /path/to/miking-pack
#
# To run this script, you need only Nix.  See README.md for more
# information.

set -e

export packdir="$(mktemp -d /tmp/miking-pack.XXXXXX)"

custom_deps=('ocaml-with-cc' 'miking')

ocaml_deps=('findlib' 'dune_3' 'owl' 'lwt' 'toml')

nixpkgs_deps=('binutils-unwrapped' 'gcc.cc')

install_dep() {
    echo "Copying from $1 to $packdir."
    cp -an $1/* $packdir
    # Files copied from the nix store are unwritable, so update the permissions.
    chmod -R +w $packdir
}

install_transitive_deps() {
    nix-store --query --requisites "$1" | while read dep_path; do
        install_dep "$dep_path"
    done
}

install_miking() {
    echo "Installing Miking and dependencies to $packdir."
    for dep in "${custom_deps[@]}"; do
        install_transitive_deps \
            "$(nix-build "$(dirname "${BASH_SOURCE[0]}")" -A $dep --no-out-link)"
    done
    for dep in "${ocaml_deps[@]}"; do
        install_transitive_deps \
            "$(nix-build '<nixpkgs>' -A ocaml-ng.ocamlPackages_5_0.$dep --no-out-link)"
    done
    for dep in "${nixpkgs_deps[@]}"; do
        install_transitive_deps "$(nix-build '<nixpkgs>' -A $dep --no-out-link)"
    done
}

patch_binaries() {
    echo "Patching dynamic library paths in binaries."
    find $packdir/bin $packdir/libexec $packdir/lib -type f \
         ! -name '*.a' ! -name '*.cma' ! -name '*.cmi' ! -name '*.cmti' ! -name '*.cmx' \
         ! -name '*.h' ! -name '*.la' ! -name '*.ml' ! -name '*.mli' ! -name '*.o' \
         -exec bash -c 'file {} | grep -e "Mach-O"' \; \
         -exec bash -c 'otool -L {} | grep -oe "/nix/store/[^/]*/[^ ]*" | while read name; do install_name_tool -change $name "@loader_path/$(realpath --relative-to="$(dirname {})" $packdir/lib)/$(basename $name)" {}; done' \;
    mv $packdir/bin/.mi-wrapped $packdir/bin/mi
}

prepare_scripts() {
    echo "Preparing setup and wrapper scripts."
    cat <<'EOS' > $packdir/mi
#!/bin/sh
SOURCE="$(dirname "$(realpath "$0")")"
export OCAMLPATH="$SOURCE/lib/ocaml:$SOURCE/lib/ocaml/5.0.0/site-lib"
export OCAMLLIB="$SOURCE/lib/ocaml"
export PATH="$SOURCE/bin"
export LIBRARY_PATH="$SOURCE/lib"
export MCORE_LIBS="stdlib=$SOURCE/lib/mcore/stdlib"
unset  OPAM_SWITCH_PREFIX
exec -a "$0" "$SOURCE/bin/mi" "$@"
EOS
    chmod +x $packdir/mi
}

make_tarball() {
    install_miking
    patch_binaries
    prepare_scripts
    tar -C "$(dirname $packdir)" -czvf miking-pack.tar.gz "$(basename $packdir)"
    rm -rf $packdir
}

make_tarball
