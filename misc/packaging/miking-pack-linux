#! /usr/bin/env nix-shell
#! nix-shell -i bash -p nix git --pure

# Build a tarball with Miking and the necessary dependencies.
# Usage:
#
#     $ /path/to/miking-pack-linux
#
# To run this script, you need only Nix.  See README.md for more
# information.

set -e

export packdir="$(mktemp -d /tmp/miking-pack.XXXXXX)"

top_deps=('binutils-unwrapped' 'gcc.cc' 'miking')

ocaml_deps=('ocaml' 'findlib' 'dune_3' 'owl' 'lwt' 'toml')

static_deps=('patchelf' 'gnugrep' 'file')

declare -A installed_deps

install_dep() {
    if [ ! "${installed_deps[$1]+present}" ]; then
        echo "Copying from $1 to $packdir."
        cp -an $1/* "$packdir"
        # Files copied from the nix store are unwritable, so update the permissions.
        chmod -R +w "$packdir"
        installed_deps["$1"]=
    else
	echo "Skipping installed path $1."
    fi
}

install_transitive_deps() {
    # We assume nix store paths contain no spaces or newlines.
    for dep_path in $(nix-store --query --requisites "$1"); do
        install_dep "$dep_path"
    done
}

install_miking() {
    echo "Installing Miking and dependencies to $packdir."
    for dep in "${top_deps[@]}"; do
        install_transitive_deps \
            "$(nix-build "$(dirname "${BASH_SOURCE[0]}")" -A $dep --no-out-link)"
    done
    for dep in "${ocaml_deps[@]}"; do
        install_transitive_deps \
            "$(nix-build "$(dirname "${BASH_SOURCE[0]}")" -A ocamlPackages.$dep --no-out-link)"
    done
    for dep in "${static_deps[@]}"; do
        install_dep "$(nix-build '<nixpkgs>' -A pkgsStatic.$dep --no-out-link)"
    done
}

patch_binaries() {
    echo "Patching dynamic library paths in binaries."
    find "$packdir/bin" "$packdir/libexec" "$packdir/lib" -type f \
         ! -name '*.a' ! -name '*.cma' ! -name '*.cmi' ! -name '*.cmti' ! -name '*.cmx' \
         ! -name '*.h' ! -name '*.la' ! -name '*.ml' ! -name '*.mli' ! -name '*.o' \
         -exec bash -c 'file "{}" | grep -e "ELF.*\(executable\|shared\).*dynamic"' \; \
         -exec bash -c 'patchelf --set-rpath "\$ORIGIN/$(realpath --relative-to="$(dirname "{}")" "$packdir/lib")" "{}"' \;
    sed -i -e 's,/nix/store/[^/]*/lib/,,g' "$packdir/lib/libc.so" "$packdir/lib/libm.so"
    mv "$packdir/bin/.mi-wrapped" "$packdir/bin/mi"
}

prepare_scripts() {
    echo "Preparing setup and wrapper scripts."
    cat <<'EOS' > "$packdir/mi-setup"
#!/bin/sh
set -e
echo "Setting up bundled Miking for use."
export SOURCE="$(dirname "$(realpath "$0")")"
echo "Bundle directory:  $SOURCE"
export MAGIC="$SOURCE/share/misc/magic.mgc"
find "$SOURCE/bin" "$SOURCE/libexec" -type f \
     -exec /bin/sh -c '"$SOURCE/bin/file" "{}" | "$SOURCE/bin/grep" -qe "ELF.*executable.*dynamic"' \; \
     -exec "$SOURCE/bin/patchelf" --set-interpreter "$SOURCE/lib/ld-linux-x86-64.so.2" "{}" \;
echo "Finished setup."
EOS
    cat <<'EOS' > "$packdir/mi"
#!/bin/sh
SOURCE="$(dirname "$(realpath "$0")")"
export OCAMLPATH="$SOURCE/lib/ocaml:$SOURCE/lib/ocaml/5.0.0/site-lib"
export OCAMLLIB="$SOURCE/lib/ocaml"
export OCAMLPARAM=":_:ccopt=-Wl,--dynamic-linker=$SOURCE/lib/ld-linux-x86-64.so.2,-rpath=$SOURCE/lib"
export PATH="$SOURCE/bin"
export LIBRARY_PATH="$SOURCE/lib"
export MCORE_LIBS="stdlib=$SOURCE/lib/mcore/stdlib"
unset  OPAM_SWITCH_PREFIX
unset  LD_LIBRARY_PATH
exec -a "$0" "$SOURCE/bin/mi" "$@"
EOS
    chmod +x "$packdir/mi-setup" "$packdir/mi"
}

make_tarball() {
    install_miking
    patch_binaries
    prepare_scripts
    tar -C "$(dirname $packdir)" -czvf miking-pack.tar.gz "$(basename $packdir)"
    rm -rf "$packdir"
}

make_tarball
