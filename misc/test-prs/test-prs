#!/usr/bin/env fish

# Try merging a sequence of PRs locally and see that tests pass

# Usage: test-prs <make-flags>* <pr-nr>*
# Example: test-prs -j4 12 163 47
# This would merge prs #12, #163, #47, in that order, using the git
# repo in the current working directory, on top of the currently
# checked out commit

# The script tries fairly hard to return to a clean state when it
# quits, even if it was interrupted (Ctrl+c), but it would surprise me
# if there wasn't some weird case where that doesn't quite work as
# intended.

# The script hopes for a happy case by default, which is merging
# everything and testing the final result immediately, without testing
# intermediate states. If that fails it falls back to a binary search,
# trying to find the first PR in the sequence that makes the tests
# fail.

# Setup cmdline options
set -l options --name (status basename)
set -a options (fish_opt --short r --long remote --required-val)
set -a options (fish_opt --short j --required-val)
set -a options (fish_opt --short m --long make-arg --multiple-vals)
set -a options (fish_opt --short t --long test-target --required-val)
set -a options (fish_opt --short b --long build-target --required-val)
set -a options (fish_opt --short c --long clean-target --required-val)
set -a options (fish_opt --short i --long install-target --required-val)
set -a options (fish_opt --short h --long help)

# Parse cmdline options
argparse $options -- $argv

# Apply defaults to missing cmdline options
set -q _flag_remote || set _flag_remote origin
set -q _flag_t || set _flag_t test
set -q _flag_c || set _flag_c clean
set makeFlags -j$_flag_j $_flag_m

set -q _flag_i && set install_dash "-" || set install_dash ""
set -q _flag_i && set install_question "?" || set install_question ""

if set -q _flag_help
    echo (status basename) "[options] [PR-NUM ...]"
    echo
    echo "Try to merge a series of PRs, running 'make clean && make && make build' for each."
    echo
    echo "Valid options:"
    echo "  -r --remote       <remote>   The git remote to pull PRs from. Defaults to 'origin'."
    echo "  -j                <num-jobs> Flag passed through to 'make', as a short-hand for --make-arg..."
    echo "  -m --make-arg     <arg>      Argument to be passed through to 'make'. May be specified multiple times."
    echo "  -t --test-target  <target>   Make target to use for testing. Defaults to 'test'."
    echo "  -b --build-target <target>   Make target to use for building. Defaults to nothing, i.e., the default make target."
    echo "  -c --clean-target <target>   Make target to use for cleaning. Defaults to 'clean'."
    echo "  -i --install      <target>   Optional make target to run after testing succeeds for each repo state. Might run"
    echo "                               multiple times, last time in the maximally merged successful state."
    echo "  -h --help                    Show this help text."

    exit 0
end

if not git diff-index --quiet HEAD --
    echo "Git index doesn't seem to be clean, refusing to run"
    exit 1
end

set allPrs $argv

set branch tmp-testing-branch

set commit (git symbolic-ref --short HEAD)
set prs $allPrs
set picked
set test_fail
set merge_fail
set statuses
set current
set tmpdir (mktemp -d)

set remote_url (git remote get-url $_flag_remote)

function cleanup -a dir
    git reset --merge >/dev/null 2>&1
    git bisect reset >/dev/null 2>&1
    git checkout $commit >/dev/null 2>&1
    git branch -D $branch >/dev/null 2>&1
    if test -n "$dir"
        rm -rf $tmpdir >/dev/null 2>&1
    end
end

function init
    set prs $argv
    set picked
    set test_fail
    set merge_fail
    set statuses
    set current
    git checkout -b $branch >/dev/null 2>&1
end

function catch --on-signal SIGINT
    echo "Caught SIGINT, cleaning up the repository"
    cleanup dir
    exit 1
end

function read_confirm -a msg default
    while true
        read -l -P "$msg " confirm

        if test -z "$confirm"
            set confirm $default
        end
        switch $confirm
            case Y y
                return 0
            case N n
                return 1
        end
    end
end

function printMergeStatus
    echo -ne "\33[2K\r" $statuses $current "??"$install_question$prs
end

function printFinalStatus
    echo -e "\n\nTests complete"
    echo "Successful: " $picked
    if test (count $merge_fail) -gt 0
        echo "Merge fail: " $merge_fail
    end
    if test (count $test_fail) -gt 0
        echo "Test fail:  " $test_fail
        echo
        if read_confirm "Would you like to see the logs from failing tests? [Yn]:" y
            if test -n "$PAGER"
                $PAGER $tmpdir/$test_fail
            else
                less $tmpdir/$test_fail
            end
        end
    end
end

echo "Legend:             ╭ Merge status"
echo " ? Todo             │╭ Test status "
echo " * Running          ││╭ Install status (if -i given)"
echo " ✓ Success          |||"
echo " ✗ Failure          ✓??123"

function doMerge --no-scope-shadowing -a runTest
    init $argv[2..-1]
    for pr in $prs
        set --erase prs[1]
        set current "*?"$install_question$pr
        printMergeStatus
        if git pull --ff --squash "$remote_url" pull/"$pr"/head &>/dev/null && git commit -m "Squashed $pr" &>/dev/null
            if test -n "$runTest"
                test (count $prs) -eq 0 -a (count $test_fail) -eq 0
                set -l fail_already_known $status
                set current "✓*"$install_question$pr
                printMergeStatus
                if test "$fail_already_known" -ne 0 && make $_flag_c $makeFlags &>$tmpdir/$pr && make $_flag_b $makeFlags &>>$tmpdir/$pr && make $_flag_t $makeFlags &>>$tmpdir/$pr
                    set current
                    if set -q _flag_i
                        set current "✓✓*"$pr
                        printMergeStatus
                        if make $_flag_i $makeFlags &>>$tmpdir/$pr
                            set statuses $statuses "✓✓✓"$pr
                        else
                            set statuses $statuses "✓✓✗"$pr
                        end
                    else
                        set statuses $statuses "✓✓"$pr
                    end
                    set picked $picked $pr
                else
                    set current
                    set statuses $statuses "✓✗"$install_dash$pr
                    set test_fail $test_fail $pr
                    git reset --hard $branch~1 &>/dev/null # Drop the commit that fails
                end
            else
                set current
                set statuses $statuses "✓?"$install_question$pr
                set picked $picked $pr
            end
        else
            set current
            set statuses $statuses "✗-"$install_dash$pr
            set merge_fail $merge_fail $pr
            git reset --merge &>/dev/null
        end
        printMergeStatus
    end
end

echo
echo "Git remote url:" $remote_url
echo "Make targets:" "clean=$_flag_c" "build=$_flag_b" "test=$_flag_t"
if test (count $makeFlags) -gt 0
    echo "Make flags:" $makeFlags
end
echo
echo "Merging PRs:"
doMerge "" $allPrs
if test (count $picked) -eq 0
    echo -e "\nNo PRs merged cleanly, exiting"
    printFinalStatus
    cleanup dir
    exit 1
end
echo -e "\nTesting all merged PRs together (happy path)"

if make $_flag_c $makeFlags &>$tmpdir/$allPrs[-1] && make $_flag_b $makeFlags &>>$tmpdir/$allPrs[-1] && make $_flag_t $makeFlags &>>$tmpdir/$allPrs[-1]
    printFinalStatus
    if set -q _flag_i
      if not make $_flag_i $makeFlags &>>$tmpdir/$allPrs[-1]
          echo "WARNING: install target failed"
      end
    end
    cleanup dir
    exit 0
end

echo -e "\nHappy path failed, falling back to testing each PR in sequence:"
cleanup
doMerge "test" $allPrs
printFinalStatus
cleanup dir
