#!/usr/bin/env fish

# Try merging a sequence of PRs locally and see that tests pass

# Usage: test-prs <make-flags>* <pr-nr>*
# Example: test-prs -j4 12 163 47
# This would merge prs #12, #163, #47, in that order, using the git
# repo in the current working directory, on top of the currently
# checked out commit

# The script tries fairly hard to return to a clean state when it
# quits, even if it was interrupted (Ctrl+c), but it would surprise me
# if there wasn't some weird case where that doesn't quite work as
# intended.

# The script hopes for a happy case by default, which is merging
# everything and testing the final result immediately, without testing
# intermediate states. If that fails it falls back to a binary search,
# trying to find the first PR in the sequence that makes the tests
# fail.

# Note that everything that does not look like a PR (i.e., just
# digits) is passed through directly to `make`


set branch tmp-testing-branch

set makeFlags (string match --regex '^\\d+$' --invert -- $argv)
set allPrs (string match --regex '^\\d+$' -- $argv)

set commit (git symbolic-ref --short HEAD)
set prs $allPrs
set picked
set test_fail
set merge_fail
set statuses
set current
set tmpdir (mktemp -d)

set miking_url https://github.com/miking-lang/miking.git

function cleanup -a dir
    git reset --merge >/dev/null 2>&1
    git bisect reset >/dev/null 2>&1
    git checkout $commit >/dev/null 2>&1
    git branch -D $branch >/dev/null 2>&1
    if test -n "$dir"
        rm -rf $tmpdir >/dev/null 2>&1
    end
end

function init
    set prs $argv
    set picked
    set test_fail
    set merge_fail
    set statuses
    set current
    git checkout -b $branch >/dev/null 2>&1
end

function catch --on-signal SIGINT
    echo "Caught SIGINT, cleaning up the repository"
    cleanup dir
    exit 1
end

function read_confirm -a msg default
    while true
        read -l -P "$msg " confirm

        if test -z "$confirm"
            set confirm $default
        end
        switch $confirm
            case Y y
                return 0
            case N n
                return 1
        end
    end
end

function printMergeStatus
    echo -ne "\33[2K\r" $statuses $current "??"$prs
end

function printFinalStatus
    echo -e "\n\nTests complete"
    echo "Successful: " $picked
    if test (count $merge_fail) -gt 0
        echo "Merge fail: " $merge_fail
    end
    if test (count $test_fail) -gt 0
        echo "Test fail:  " $test_fail
        echo
        if read_confirm "Would you like to see the logs from failing tests? [Yn]:" y
            if test -n "$PAGER"
                $PAGER $tmpdir/$test_fail
            else
                less $tmpdir/$test_fail
            end
        end
    end
end

echo "Legend:            Example:"
echo " ? Todo             ╭ Merge status"
echo " * Running          │╭ Test status "
echo " ✓ Success          ││"
echo " ✗ Failure          ✓?123"

function doMerge -a runTest
    init $argv[2..-1]
    for pr in $prs
        set --erase prs[1]
        set current "*?"$pr
        printMergeStatus
        if git pull --ff --squash "$miking_url" pull/"$pr"/head >/dev/null 2>&1 && git commit -m "Squashed $pr" >/dev/null 2>&1
            if test -n "$runTest"
                test (count $prs) -eq 0 -a (count $test_fail) -eq 0
                set -l fail_already_known $status
                set current "✓*"$pr
                printMergeStatus
                if test "$fail_already_known" -ne 0 && make clean && make test-all $makeFlags >$tmpdir/$pr 2>&1
                    set current
                    set statuses $statuses "✓✓"$pr
                    set picked $picked $pr
                else
                    set current
                    set statuses $statuses "✓✗"$pr
                    set test_fail $test_fail $pr
                    git reset --hard $branch~1 >/dev/null 2>&1 # Drop the commit that fails
                end
            else
                set current
                set statuses $statuses "✓?"$pr
                set picked $picked $pr
            end
        else
            set current
            set statuses $statuses "✗-"$pr
            set merge_fail $merge_fail $pr
            git reset --merge >/dev/null 2>&1
        end
        printMergeStatus
    end
end

echo
if test (count $makeFlags) -gt 0
    echo "Make flags:" $makeFlags
end
echo "Merging PRs:"
doMerge "" $allPrs
if test (count $picked) -eq 0
    echo -e "\nNo PRs merged cleanly, exiting"
    printFinalStatus
    cleanup dir
    exit 1
end
echo -e "\nTesting all merged PRs together (happy path)"

if make clean && make test-all $makeFlags >$tmpdir/$allPrs[-1] 2>&1
    printFinalStatus
    cleanup dir
    exit 0
end

echo -e "\nHappy path failed, falling back to testing each PR in sequence:"
cleanup
doMerge "test" $allPrs
printFinalStatus
cleanup dir
