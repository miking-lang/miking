include "option.mc"
include "mexpr/info.mc"
include "map.mc"
include "stringid.mc"

lang Annotator
  type Annotation = String
  type Output = String
  type Title = String

  sem escapeContent : String -> Output
  sem escapeAnnot : String -> Annotation
  sem annotate : Annotation -> Output -> Output
  sem document : Title -> Output -> Output
  sem finalize : Output -> Output
end

-- NOTE(vipa, 2022-08-25): This isn't the greatest, but it works
let _templateBefore : String = strJoin "\n"
  [ "<!DOCTYPE html>"
  , "<html>"
  , "<head>"
  , "  <title></title>"
  , "</head>"
  , "<style type=\"text/css\">"
  , "  html {"
  , "    height: 100%;"
  , "  }"
  , "  .tagged {"
  , "    cursor: pointer;"
  , "  }"
  , "  .hover {"
  , "    background-color: rgba(0, 0, 0, 0.09);"
  , "  }"
  , "  body {"
  , "    display: flex;"
  , "    flex-direction: row;"
  , "    box-sizing: border-box;"
  , "    height: 100%;"
  , "    margin: 0px;"
  , "    padding: 5px;"
  , "  }"
  , "  code {"
  , "    white-space: pre;"
  , "    width: 50%;"
  , "    overflow-x: auto;"
  , "  }"
  , "  #sidebar {"
  , "    width: 50%;"
  , "    font-family: monospace;"
  , "    overflow-x: auto"
  , "  }"
  , "  #sidebar > .tag {"
  , "    box-sizing: border-box;"
  , "    width: 100%;"
  , "    margin-bottom: 5px;"
  , "    white-space: pre;"
  , "    padding: 2px;"
  , "    border-style: solid;"
  , "    border-color: gray;"
  , "    border-width: 1px;"
  , "  }"
  , "  #sidebar > .tag:hover {"
  , "    background-color: gray;"
  , "  }"
  , "  code .tag {"
  , "    display: none;"
  , "  }"
  , "  .highlight {"
  , "    background-color: gray;"
  , "  }"
  , "  .locked {"
  , "    font-weight: bold;"
  , "  }"
  , "</style>"
  , "<body>"
  , ""
  , "<code>"
  ]

let _templateAfter = strJoin "\n"
  [ "</code>"
  , "<div id=\"sidebar\"></div>"
  , ""
  , "<script type=\"text/javascript\">"
  , "let sidebar = document.getElementById(\"sidebar\");"
  , "let lock = null;"
  , ""
  , "Array.from(document.getElementsByClassName(\"tagged\")).forEach(function(e) {"
  , "  e.addEventListener(\"mouseover\", showTag);"
  , "  e.addEventListener(\"mouseout\", hideTag);"
  , "  e.addEventListener(\"click\", clickTag);"
  , "})"
  , ""
  , "function copyTag(elem) {"
  , "  let tag = elem.getElementsByClassName(\"tag\")[0].cloneNode(true);"
  , "  tag.originThing = elem;"
  , "  tag.addEventListener(\"mouseover\", function() {"
  , "    elem.classList.add(\"highlight\");"
  , "  })"
  , "  tag.addEventListener(\"mouseout\", function() {"
  , "    elem.classList.remove(\"highlight\");"
  , "  })"
  , "  tag.addEventListener(\"removed\", function() {"
  , "    console.log(\"removed\");"
  , "    elem.classList.remove(\"highlight\");"
  , "  })"
  , "  return tag;"
  , "}"
  , ""
  , "function showTag(e) {"
  , "  if (!e.countShown)"
  , "    e.countShown = 0;"
  , "  if (e.countShown < 8) {"
  , "    this.classList.add(\"hover\");"
  , "    e.countShown++;"
  , "  }"
  , "  if (this.shownThing || lock)"
  , "    return;"
  , "  sideTag(this, true);"
  , "}"
  , ""
  , "function hideTag(e) {"
  , "  this.classList.remove(\"hover\");"
  , "  if (!this.shownThing || lock)"
  , "    return;"
  , "  sideTag(this, false);"
  , "}"
  , ""
  , "function sideTag(elem, show) {"
  , "  if (show) {"
  , "    if (elem.shownThing)"
  , "      sideTag(elem, false);"
  , "    elem.shownThing = copyTag(elem);"
  , "    sidebar.appendChild(elem.shownThing);"
  , "  } else if (elem.shownThing) {"
  , "    elem.shownThing.remove();"
  , "    elem.shownThing = null;"
  , "  }"
  , "}"
  , ""
  , "function clickTag(e) {"
  , "  if (e.defaultPrevented) {"
  , "    sideTag(this, true);"
  , "    return;"
  , "  }"
  , ""
  , "  if (!lock) {"
  , "    lock = this;"
  , "    this.classList.add(\"locked\");"
  , "    e.stopPropagation();"
  , "  } else if (lock === this) {"
  , "    lock = null;"
  , "    this.classList.remove(\"locked\");"
  , "    e.stopPropagation();"
  , "  } else {"
  , "    lock.classList.remove(\"locked\");"
  , "    this.classList.add(\"locked\");"
  , "    lock = this;"
  , "    Array.from(sidebar.children).forEach(function(t) {"
  , "      t.originThing.shownThing = null;"
  , "    })"
  , "    sidebar.innerHTML = \"\";"
  , "    sideTag(this, true);"
  , "    e.preventDefault();"
  , "  }"
  , "}"
  , "</script>"
  , "</body>"
  , "</html>"
  ]

let _escapeHtmlChar = lam c.
  switch c
  case '<' then "&lt"
  case '>' then "&gt"
  case '&' then "&amp"
  case c then [c]
  end

lang HtmlAnnotator = Annotator
  sem escapeContent = | str -> join (map _escapeHtmlChar str)
  sem escapeAnnot = | str -> join (map _escapeHtmlChar str)

  sem annotate annot = | str -> join
    [ "<span class=\"tagged\"><div class=\"tag\">"
    , annot
    , "</div>"
    , str
    , "</span>"
    ]

  sem document title = | str ->
    join ["<h1>", title, "</h1>\n", str, "\n\n"]

  sem finalize = | str ->
    join [_templateBefore, str, _templateAfter]
end
