-- TODO(vipa, 2022-03-25): add grouping for Regex once we support it
-- TODO(vipa, 2022-03-25): add grouping for Expr once we support it
type File
type Decl
type Regex
type Expr

token String
token UName
token LName
token LIdent

start File

prod File: File = decls:Decl+

prod Start: Decl = "start" name:UName
prod Type: Decl =
  "type" name:UName
  ( "{"
    properties:{name:LName "=" val:Expr ","}*
  "}"
  )?
prod TokenDecl: Decl =
  "token" name:UName?
  ( "{"
    properties:{name:LName "=" val:Expr ","}*
  "}"
  )?
prod PrecedenceTable: Decl =
  "precedence" "{"
    levels:{noeq:"~"? operators:UName+ ";"}*
  "}"
  ( "except" "{"
    exceptions:{lefts:UName+ "?" rights:UName+ ";"}*
  "}"
  )?
prod Production: Decl =
  (kprod:"prod" | kinf:"infix" | kpref:"prefix" | kpostf:"postfix")
  assoc:LIdent? name:UName ":" nt:UName "=" regex:Regex

prod Record: Regex = "{" regex:Regex "}"
prod Empty: Regex = "empty"
prod Literal: Regex = val:String
prod Token: Regex = name:UName ("[" arg:Expr "]")?
postfix RepeatPlus: Regex = "+"
postfix RepeatStar: Regex = "*"
postfix RepeatQuestion: Regex = "?"
prefix Named: Regex = name:LIdent ":"
infix left Alternative: Regex = "|"
infix left Concat: Regex = empty

precedence {
  Named;
  RepeatPlus RepeatStar RepeatQuestion;
  Concat;
  Alternative;
}

infix left App: Expr = empty
prod Con: Expr = name:UName
prod String: Expr = val:String
prod Variable: Expr = name:LName
prod RecordExpr: Expr =
  "{"
    (fields:{name:String "=" val:Expr}
     fields:{"," name:String "=" val:Expr}*)?
  "}"
